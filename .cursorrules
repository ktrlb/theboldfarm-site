# The Bold Farm Website - Cursor Rules

## Project Overview
This is a Next.js 15 website for The Bold Farm, a Nigerian Dwarf goat farm. The site features goat listings, farm information, and an admin panel for managing content.

## Tech Stack
- **Framework**: Next.js 15.4.6 (App Router) with TypeScript
- **Styling**: Tailwind CSS with Shadcn UI components
- **Database**: Supabase (PostgreSQL)
- **Deployment**: Vercel (auto-deploy from GitHub)
- **Package Manager**: npm (Note: yarn.lock exists but using npm)

## Development Workflow Rules

### Starting Development
- **Always kill any running dev servers before starting a new one**
- Check for running processes: `ps aux | grep "next dev"`
- Kill if needed before running `npm run dev`
- Dev server runs on port 3001 if 3000 is occupied

### Deployment Rules
- **Always deploy through git - NEVER deploy directly**
- **Always wait for explicit user approval before building and deploying**
- Build process: `npm run build` (test build first)
- Deployment: `git add . && git commit -m "message" && git push origin main`
- Vercel auto-deploys from GitHub main branch

### Code Standards
- Use TypeScript for all code
- Use functional components with React hooks
- Prefer Server Components over Client Components
- Use "use client" only when necessary (forms, state, browser APIs)
- Follow Next.js App Router conventions

## Database Structure

### Goats Table (Supabase)
```typescript
interface Goat {
  id: number;
  name: string;
  type: 'Dairy Doe' | 'Breeding Buck' | 'Doeling Kid' | 'Buckling Kid' | 'Wether' | 'Pet Only Doe';
  birth_date: string;
  birth_type: 'exact' | 'year';
  price: number;
  is_for_sale: boolean;
  registered: boolean;
  horn_status: 'Horned' | 'Dehorned' | 'Polled';
  dam: string | null;
  sire: string | null;
  bio: string;
  status: 'Available' | 'Reserved' | 'Sold';
  photos: string[];
  created_at: string;
  updated_at: string;
}
```

### Products Table (Supabase)
```typescript
interface Product {
  id: number;
  name: string;
  category: string;
  price: number;
  description: string;
  in_stock: boolean;
  featured: boolean;
  photos: string[];
  created_at: string;
}
```

## Goat Type System
**Important**: The site uses specific goat type values. Always use these exact strings:
- **Dairy Doe** - Adult female goats for milk production
- **Breeding Buck** - Adult male goats for breeding
- **Doeling Kid** - Female kids (young goats)
- **Buckling Kid** - Male kids (young goats)
- **Wether** - Neutered males (great for pet homes)
- **Pet Only Doe** - Adult females specifically for pet homes (not for dairy)

## Key Features

### Filtering System
- Goats for Sale page: Filters by goat type, shows only goats with `is_for_sale: true`
- Animals page: Filters all goats regardless of sale status
- Both pages use the same filter logic and goat type categories

### Admin Panel
- Protected route at `/admin`
- Allows CRUD operations on goats and products
- Add/Edit forms include all goat type options
- Forms do NOT require name or bio fields (optional)

### Shop Page
- Contact-based ordering (not e-commerce)
- Directs users to Facebook, email, or farmstand events
- NO Shopify integration
- NO cart functionality

## Important Notes

### Data Source
- **ALL data comes from Supabase** - no local fallback data
- Never use mock data or local JSON files
- If Supabase fails, show error state, don't fall back to local data

### Removed Integrations
- ❌ Shopify (completely removed)
- ❌ Shopping cart functionality
- ❌ Direct e-commerce checkout

### Key Files
- `/src/lib/supabase-context.tsx` - Database context provider
- `/src/lib/data.ts` - Type definitions and helper functions
- `/src/components/admin-panel.tsx` - Admin CRUD interface
- `/src/app/goats/page.tsx` - Goats for sale with filtering
- `/src/app/animals/page.tsx` - All farm animals with filtering

## Environment Variables Required
```bash
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key
```

## Common Tasks

### Adding a New Goat Type
1. Update type definition in `/src/lib/data.ts`
2. Add to filter options in goats and animals pages
3. Add to select options in admin panel (AddGoatForm and EditGoatForm)
4. Update Supabase table constraint if needed

### Updating Filter Logic
- Update `FILTER_OPTIONS` array
- Update switch statement in `filteredGoats` useMemo
- Ensure consistent filtering across goats and animals pages

### Testing Before Deploy
```bash
npm run build  # Always test build first
# Fix any errors or warnings
git add .
git commit -m "descriptive message"
git push origin main
```

## UI/UX Preferences
- Orange is the primary brand color (#orange-600)
- Mobile-first responsive design
- Empty states should be helpful and encouraging
- Filter tags use rounded-full pill style
- Card components for goat/product displays

## Performance Notes
- Images should use Next.js Image component when possible
- Lazy load non-critical content
- Use proper TypeScript types throughout
- Keep bundle sizes optimized

---

**Remember**: Always ask before deploying to production. The user wants explicit control over when builds and deployments happen.



